\ProvidesPackage{latex-bfs}[2021/03/27 v1.0 implementation of an bfs algorithm]
\newif\ifltxbfs@do@debug@
\DeclareOption{debug}{\ltxbfs@do@debug@true}\DeclareOption{nodebug}{\ltxbfs@do@debug@false}
\ProcessOptions*
\RequirePackage{latex-bfs-queue,latex-bfs-matrix}
% Note: The implementation does not allow diagonal movement
\newcount\c@ltxbfs@qu@pointref \newcount\c@ltxbfs@qu@pointref@start
\CreateMatrix{ltxbfs@bm}\z@\z@ \CreateQueue{ltxbfs@qu}

\def\@ltxbfs@debug@void@state#1#2#3#4{}% Debug current State
% (#1) starts; (#2) ends; #3 comment; #4 queue to highlight
\def\@ltxbfs@debug@@state#1#2#3#4{%
#3\par\noindent\MatrixForY{ltxbfs@bm}{\MatrixForX{ltxbfs@bm}{%
\lbfsma@ifpointinqueue(\CurMatrixX/\CurMatrixY) in {#1}{{\@declaredcolor{purple}>}}{%
\lbfsma@ifpointinqueue(\CurMatrixX/\CurMatrixY) in {#2}{{\@declaredcolor{purple}<}}{%
\IfInQueue{#4}{\CurMatrixX/\CurMatrixY}{{\@declaredcolor{teal}X}}{%
\ltxbfs@ifblocked(\CurMatrixX/\CurMatrixY){\#}{{\@declaredcolor{gray}-}}%
}}}}\newline}}

\ifltxbfs@do@debug@\RequirePackage{xcolor}
\let\@ltxbfs@debug@state\@ltxbfs@debug@@state
\else\let\@ltxbfs@debug@state\@ltxbfs@debug@void@state\fi

\def\ltxbfs@setup@startstates#1{%
\@for\pnt:=#1\do{%
\advance\c@ltxbfs@qu@pointref\@ne
\advance\c@ltxbfs@qu@pointref@start\@ne
\DeclareQueue{ltxbfs@pointq@\number\c@ltxbfs@qu@pointref}%
\erawEnqueue{ltxbfs@qu}{\pnt;\number\c@ltxbfs@qu@pointref;0}}}

% every point will be assigned an incrementing counter
% which will be linked to it's queue
\newif\if@ltxbfs@foundgoal@
% multiple starts and ends
% (starts) -> (ends) [width x height]{IsItBlocked(x/y){yes}{no}}{result queue}
\def\GetShortestPath(#1)->(#2)[#3x#4]#5#6{\begingroup
\c@ltxbfs@qu@pointref0 \c@ltxbfs@qu@pointref@start0
\UpdateMatrix{ltxbfs@bm}{#3}{#4}%
\ResetQueue{ltxbfs@qu}%
\@ltxbfs@foundgoal@false
\expandafter\let\expandafter\ltxbfs@ifblocked\csname #5\endcsname
\@ltxbfs@debug@state{#1}{#2}{Initialization}{}%
\ltxbfs@setup@startstates{#1}%
\ltxbfs@bfs{#2}%
\if@ltxbfs@foundgoal@
\AppendQueue{#6}{ltxbfs@pointq@\@goalp}%
\erawEnqueue{#6}{\@goalx/\@goaly}%
\@ltxbfs@debug@state{#1}{#2}{Final State}{ltxbfs@pointq@\@goalp}%
\else\@ltxbfs@debug@state{#1}{#2}{Final State}{}%
\fi\GlobalQueue{#6}\endgroup}

\def\ltxbfs@@ldpt#1/#2;#3;#4\@nil{\def\@curx{#1}\def\@cury{#2}\def\@curp{#3}\def\@curd{#4}}
\def\ltxbfs@ldpt#1\@nil{\expandafter\ltxbfs@@ldpt#1\@nil}
\def\ltxbfs@bfs#1{%
\loop
% Pick point from the queue
\Dequeue{ltxbfs@qu}%
\expandafter\ltxbfs@ldpt\dequeued\@nil
\lbfsma@ifpointinqueue(\@curx/\@cury) in {#1}{%
    \edef\@goalx{\@curx}\edef\@goaly{\@cury}\edef\@goalp{\@curp}%
    \@ltxbfs@foundgoal@true\let\iterate\relax
}{\ltxbfs@bfs@nexts}%
\ifnum\GetQueueSize{ltxbfs@qu}>0 \repeat}

% will check if in bound of bitmap matrix and if not blocked
\def\ltxbfs@isvalidtarget#1#2#3#4{%
\ifnum#1<0 #4\else\ifnum#2<0 #4\else% < 0
\ifnum#1<\GetMatrixWidth{ltxbfs@bm}%
\ifnum#2<\GetMatrixHeight{ltxbfs@bm}% is in field
\ltxbfs@ifblocked(#1/#2){#4}{%
    \IfMatrixBlocked{ltxbfs@bm}(#1/#2){#4}{#3}
}%
\else#4\fi\else#4\fi\fi\fi}

% queue to add | queue as source
\def\ExtendToPointPath#1#2{%
\DeclareQueue{ltxbfs@pointq@#1}%
\ifnum#2>\c@ltxbfs@qu@pointref@start\relax \AppendQueue{ltxbfs@pointq@#1}{ltxbfs@pointq@#2}\fi
\erawEnqueue{ltxbfs@pointq@#1}{\@curx/\@cury}}

\def\ltxbfs@bfs@trydir#1#2#3{%
\edef\@tx{#1}\edef\@ty{#2}%
\ltxbfs@isvalidtarget\@tx\@ty{%
\BlockMatrix{ltxbfs@bm}(\@tx/\@ty)%
\advance\c@ltxbfs@qu@pointref\@ne% add another point queue
\expandafter\ExtendToPointPath\expandafter{\number\c@ltxbfs@qu@pointref}\@curp
\erawEnqueue{ltxbfs@qu}{\@tx/\@ty;\number\c@ltxbfs@qu@pointref;#3}%
}\relax}

\def\ltxbfs@bfs@nexts{% add further points
\ifcase\@curd\ltxbfs@bfs@trydir\@curx{\the\numexpr\@cury+1}0%
\or\ltxbfs@bfs@trydir\@curx{\the\numexpr\@cury-1}1\or\ltxbfs@bfs@trydir{\the\numexpr\@curx+1}\@cury2%
\or\ltxbfs@bfs@trydir{\the\numexpr\@curx-1}\@cury3%
\fi
\ifnum\@curd>0\ltxbfs@bfs@trydir\@curx{\the\numexpr\@cury+1}0\fi% up
\ifnum\@curd=1\else\ltxbfs@bfs@trydir\@curx{\the\numexpr\@cury-1}1\fi% down
\ifnum\@curd=2\else\ltxbfs@bfs@trydir{\the\numexpr\@curx+1}\@cury2\fi% left
\ifnum\@curd<3\ltxbfs@bfs@trydir{\the\numexpr\@curx-1}\@cury3\fi% right
}
\endinput